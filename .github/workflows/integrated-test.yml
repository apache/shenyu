# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: it

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  build:
    strategy:
      matrix:
        case:
          - shenyu-integrated-test-apache-dubbo
          - shenyu-integrated-test-grpc
          - shenyu-integrated-test-http
          - shenyu-integrated-test-https
          - shenyu-integrated-test-motan
          - shenyu-integrated-test-spring-cloud
          - shenyu-integrated-test-sofa
          - shenyu-integrated-test-websocket
          - shenyu-integrated-test-rewrite
          - shenyu-integrated-test-combination
          - shenyu-integrated-test-sdk-apache-dubbo
          - shenyu-integrated-test-sdk-http
    runs-on: ubuntu-latest
    if: (github.repository == 'apache/shenyu')
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      # Copied from https://github.com/jens-maus/RaspberryMatic/blob/ea6b8ce0dd2d53ea88b2766ba8d7f8e1d667281f/.github/workflows/ci.yml#L34-L40
      # and https://github.com/actions/virtual-environments/issues/709#issuecomment-612569242
      - name: Free disk space
        run: |
          df --human-readable
          sudo apt clean
          for image in $(docker image ls --all --quiet); do
            docker rmi $image
          done
          rm --recursive --force "$AGENT_TOOLSDIRECTORY"
          df --human-readable
      - uses: ./actions/paths-filter
        id: filter
        with:
          filters: |
            integration:
              - 'shenyu-integrated-test/**'
              - 'shenyu-*/**'
              - 'pom.xml'
              - '**/pom.xml'
              - 'shenyu-examples/**'
              - '!**/*.md'
              - '!**/*.txt'
              - '!resources/static/**'
              - '!.asf.yaml'
              - '!.gitignore'
              - '!.licenserc.yaml'
              - '!LICENSE'
              - '!NOTICE'
              - '!.github/ISSUE_TEMPLATE/**'
              - '!.github/PULL_REQUEST_TEMPLATE'
      - name: Restore ShenYu Maven Repos
        if: steps.filter.outputs.integration == 'true'
        uses: actions/cache/restore@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - uses: actions/setup-java@v4
        if: steps.filter.outputs.integration == 'true'
        with:
          java-version: 17
          distribution: "temurin"
      - name: Install mvnd
        if: steps.filter.outputs.integration == 'true'
        shell: bash
        run: |
          MVND_VERSION=1.0.2
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            curl -sL https://downloads.apache.org/maven/mvnd/${MVND_VERSION}/maven-mvnd-${MVND_VERSION}-windows-amd64.zip -o mvnd.zip
            unzip -q mvnd.zip
            mkdir -p $HOME/.local
            mv maven-mvnd-${MVND_VERSION}-windows-amd64 $HOME/.local/mvnd
            echo "$HOME/.local/mvnd/bin" >> $GITHUB_PATH
            echo "MVND_HOME=$HOME/.local/mvnd" >> $GITHUB_ENV
          else
            curl -sL https://downloads.apache.org/maven/mvnd/${MVND_VERSION}/maven-mvnd-${MVND_VERSION}-linux-amd64.zip -o mvnd.zip
            unzip -q mvnd.zip
            mkdir -p $HOME/.local
            mv maven-mvnd-${MVND_VERSION}-linux-amd64 $HOME/.local/mvnd
            echo "$HOME/.local/mvnd/bin" >> $GITHUB_PATH
            echo "MVND_HOME=$HOME/.local/mvnd" >> $GITHUB_ENV
          fi
      - name: Build with Maven
        if: steps.filter.outputs.integration == 'true'
        shell: bash
        run: |
          if mvnd --version > /dev/null 2>&1; then
            echo "Using mvnd for build"
            mvnd -B clean install -Prelease,docker -Dmaven.javadoc.skip=true -Dmaven.test.skip=true
          else
            echo "Falling back to maven wrapper"
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              ./mvnw.cmd -B clean install -Prelease,docker -Dmaven.javadoc.skip=true -Dmaven.test.skip=true
            else
              ./mvnw -B clean install -Prelease,docker -Dmaven.javadoc.skip=true -Dmaven.test.skip=true
            fi
          fi
      - name: Build examples
        if: steps.filter.outputs.integration == 'true'
        shell: bash
        run: |
          if mvnd --version > /dev/null 2>&1; then
            echo "Using mvnd for build examples"
            mvnd -B clean install -Pexample -Dmaven.javadoc.skip=true -Dmaven.test.skip=true -am -f ./shenyu-examples/pom.xml
          else
            echo "Falling back to maven wrapper for examples"
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              ./mvnw.cmd -B clean install -Pexample -Dmaven.javadoc.skip=true -Dmaven.test.skip=true -am -f ./shenyu-examples/pom.xml
            else
              ./mvnw -B clean install -Pexample -Dmaven.javadoc.skip=true -Dmaven.test.skip=true -am -f ./shenyu-examples/pom.xml
            fi
          fi
      - name: Build integrated tests
        if: steps.filter.outputs.integration == 'true'
        shell: bash
        run: |
          if mvnd --version > /dev/null 2>&1; then
            echo "Using mvnd for build integrated tests"
            mvnd -B clean install -Pit -DskipTests -f ./shenyu-integrated-test/pom.xml
          else
            echo "Falling back to maven wrapper for integrated tests"
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              ./mvnw.cmd -B clean install -Pit -DskipTests -f ./shenyu-integrated-test/pom.xml
            else
              ./mvnw -B clean install -Pit -DskipTests -f ./shenyu-integrated-test/pom.xml
            fi
          fi
      - name: Start docker compose
        if: steps.filter.outputs.integration == 'true'
        run: docker compose -f ./shenyu-integrated-test/${{ matrix.case }}/docker-compose.yml up -d
      - name: Wait for docker compose start up completely
        if: steps.filter.outputs.integration == 'true'
        run: bash ./shenyu-integrated-test/${{ matrix.case }}/script/healthcheck.sh
      - name: Disk space info
        run: |
          df --human-readable
      - name: Run test
        id: test
        if: steps.filter.outputs.integration == 'true'
        shell: bash
        run: |
          if mvnd --version > /dev/null 2>&1; then
            echo "Using mvnd for running tests"
            mvnd test -Pit -f ./shenyu-integrated-test/${{ matrix.case }}/pom.xml
          else
            echo "Falling back to maven wrapper for tests"
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              ./mvnw.cmd test -Pit -f ./shenyu-integrated-test/${{ matrix.case }}/pom.xml
            else
              ./mvnw test -Pit -f ./shenyu-integrated-test/${{ matrix.case }}/pom.xml
            fi
          fi
        continue-on-error: true
      - name: Check test result
        if: steps.filter.outputs.integration == 'true'
        run: |
          docker compose -f ./shenyu-integrated-test/${{ matrix.case }}/docker-compose.yml logs --tail="all"
          if [[ ${{steps.test.outcome}} == "failure" ]]; then
            echo "Test Failed"
            exit 1
          else
            echo "Test Successful"
            exit 0
          fi
