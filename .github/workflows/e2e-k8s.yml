# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: e2e

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      e2e: ${{ steps.filter.outputs.e2e }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Free disk space
        run: |
          df --human-readable
          sudo apt clean
          for image in $(docker image ls --all --quiet); do
            docker rmi $image
          done
          rm --recursive --force "$AGENT_TOOLSDIRECTORY"
          df --human-readable
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: '.github/filters.yml'
          list-files: json

  build-docker-images:
    needs: changes
    if: ${{ needs.changes.outputs.e2e == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Free disk space
        run: |
          df --human-readable
          sudo apt clean
          for image in $(docker image ls --all --quiet); do
            docker rmi $image
          done
          rm --recursive --force "$AGENT_TOOLSDIRECTORY"
          df --human-readable

      - name: Set up JDK 17 for Building ShenYu
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: ./mvnw -B clean install -Prelease,docker -Dmaven.javadoc.skip=true -B -Drat.skip=true -Dmaven.test.skip=true -Djacoco.skip=true -DskipITs -DskipTests package -T1C

      - name: Save ShenYu Maven Repos
        uses: actions/cache/save@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

#      - name: Build shenyu-e2e-engine with Maven
#        run: ./mvnw -B -f ./shenyu-e2e/pom.xml -pl shenyu-e2e-engine -am clean install

#      - name: Save ShenYu E2E Maven Repos
#        if: steps.restore-e2e-maven-cache.outputs.cache-hit != 'true'
#        uses: actions/cache/save@v3
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-e2e-maven-${{ hashFiles('**/pom.xml') }}

      - name: Build Docker Image
        run: |
          docker save apache/shenyu-bootstrap:latest > /tmp/apache-shenyu-bootstrap.tar
          docker save apache/shenyu-admin:latest > /tmp/apache-shenyu-admin.tar

      - name: Upload Docker Image Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: shenyu-images
          path: /tmp/apache-shenyu-*.tar
          retention-days: 1

  e2e-storage:
    runs-on: ubuntu-latest
    needs:
      - changes
      - build-docker-images
    if: (github.repository == 'apache/shenyu' && ${{ needs.changes.outputs.e2e == 'true' }})
    strategy:
      matrix:
        include:
          - case: shenyu-e2e-case-storage
            script: e2e-h2-compose
          - case: shenyu-e2e-case-storage
            script: e2e-mysql-compose
          - case: shenyu-e2e-case-storage
            script: e2e-postgres-compose
          - case: shenyu-e2e-case-storage
            script: e2e-opengauss-compose
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Free disk space
        run: |
          df --human-readable
          sudo apt clean
          for image in $(docker image ls --all --quiet); do
            docker rmi $image
          done
          rm --recursive --force "$AGENT_TOOLSDIRECTORY"
          df --human-readable
          rm -rf /tmp/shenyu
          mkdir -p /tmp/shenyu

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: '.github/filters.yml'
          list-files: json

#      - name: Install k8s
#        if: steps.filter.outputs.changed == 'true'
#        run: |
#          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.29.6+k3s2 K3S_KUBECONFIG_MODE=777 sh -
#          cat /etc/rancher/k3s/k3s.yaml
#          mkdir -p ~/.kube
#          cp /etc/rancher/k3s/k3s.yaml ~/.kube/config

      - name: Set up JDK 17 for Building ShenYu
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore ShenYu Maven Repos
        if: steps.filter.outputs.changed == 'true'
        uses: actions/cache/restore@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - uses: actions/download-artifact@v3
        with:
          name: shenyu-images
          path: /tmp/shenyu/
      
      - name: Load ShenYu Docker Images
        run: |
          docker load --input /tmp/shenyu/apache-shenyu-admin.tar
          docker load --input /tmp/shenyu/apache-shenyu-bootstrap.tar
          docker image ls -a

#      - name: Build k8s Cluster
#        if: steps.filter.outputs.changed == 'true'
#        run: |
#          sudo k3s ctr images import /tmp/shenyu/apache-shenyu-admin.tar
#          sudo k3s ctr images import /tmp/shenyu/apache-shenyu-bootstrap.tar

      - name: Run E2E Tests
        if: steps.filter.outputs.changed == 'true'
        run: |
          bash ./shenyu-e2e/shenyu-e2e-case/${{ matrix.case }}/compose/script/${{ matrix.script }}.sh

#      - name: Cluster Test after Healthcheck
#        if: steps.filter.outputs.changed == 'true'
#        run: |
#          kubectl get all
#          kubectl get events --all-namespaces

  e2e-case:
    runs-on: ubuntu-latest
    needs:
      - changes
      - build-docker-images
    if: (github.repository == 'apache/shenyu' && ${{ needs.changes.outputs.e2e == 'true' }})
    strategy:
      matrix:
        include:
          - case: shenyu-e2e-case-http
            script: e2e-http-sync-compose
          - case: shenyu-e2e-case-spring-cloud
            script: e2e-springcloud-sync-compose
          - case: shenyu-e2e-case-apache-dubbo
            script: e2e-apache-dubbo-sync-compose
          - case: shenyu-e2e-case-sofa
            script: e2e-sofa-sync-compose
          - case: shenyu-e2e-case-grpc
            script: e2e-grpc-sync-compose
          - case: shenyu-e2e-case-websocket
            script: e2e-websocket-sync-compose
          - case: shenyu-e2e-case-cluster
            script: e2e-cluster-jdbc-compose
          - case: shenyu-e2e-case-cluster
            script: e2e-cluster-zookeeper-compose
          - case: shenyu-e2e-case-logging-rocketmq
            script: e2e-logging-rocketmq-compose
          - case: shenyu-e2e-case-logging-kafka
            script: e2e-logging-kafka-compose
            
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Free disk space
        run: |
          df --human-readable
          sudo apt clean
          for image in $(docker image ls --all --quiet); do
            docker rmi $image
          done
          rm --recursive --force "$AGENT_TOOLSDIRECTORY"
          df --human-readable
          rm -rf /tmp/shenyu
          mkdir -p /tmp/shenyu

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: '.github/filters.yml'
          list-files: json

#      - name: Install k8s
#        if: steps.filter.outputs.changed == 'true'
#        run: |
#          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.29.6+k3s2 K3S_KUBECONFIG_MODE=777 sh -
#          cat /etc/rancher/k3s/k3s.yaml
#          mkdir -p ~/.kube
#          cp /etc/rancher/k3s/k3s.yaml ~/.kube/config

      - name: Set up JDK 17 for Building ShenYu
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore ShenYu Maven Repos
        if: steps.filter.outputs.changed == 'true'
        uses: actions/cache/restore@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - uses: actions/download-artifact@v3
        with:
          name: shenyu-images
          path: /tmp/shenyu/

#      - name: Restore ShenYu E2E Maven Repos
#        uses: actions/cache/restore@v3
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-e2e-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-e2e-maven-

      - name: Build examples with Maven
        run: ./mvnw -B clean install -Pexample -Dmaven.javadoc.skip=true -Dmaven.test.skip=true -am -f ./shenyu-examples/pom.xml

      - uses: actions/download-artifact@v3
        with:
          name: shenyu-images
          path: /tmp/shenyu/

      - name: Load ShenYu Docker Images
        run: |
          docker load --input /tmp/shenyu/apache-shenyu-admin.tar
          docker load --input /tmp/shenyu/apache-shenyu-bootstrap.tar
          docker image ls -a

#      - name: Build k8s Cluster
#        if: steps.filter.outputs.changed == 'true'
#        run: |
#          sudo k3s ctr images import /tmp/shenyu/apache-shenyu-admin.tar
#          sudo k3s ctr images import /tmp/shenyu/apache-shenyu-bootstrap.tar

#      - name: Setup Debug Session
#        uses: mxschmitt/action-tmate@v3
#        timeout-minutes: 15
#        with:
#          detached: true

      - name: Run E2E Tests
        if: steps.filter.outputs.changed == 'true'
        run: |
          bash ./shenyu-e2e/shenyu-e2e-case/${{ matrix.case }}/compose/script/${{ matrix.script }}.sh

#      - name: Cluster Test after Healthcheck
#        if: steps.filter.outputs.changed == 'true'
#        run: |
#          kubectl get all
#          kubectl get events --all-namespaces

  requirement:
    name: e2e
    if: ${{ needs.changes.outputs.e2e == 'true' }}
    needs:
      - changes
      - e2e-storage
      - e2e-case
    runs-on: ubuntu-latest
    steps:
      - name: checking job status
        run: |
          [[ "${{ needs.e2e-storage.result }}" == "success" ]] || exit -1
          [[ "${{ needs.e2e-case.result }}" == "success" ]] || exit -1
